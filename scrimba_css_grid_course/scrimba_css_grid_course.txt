.container {
    display: grid;
    grid-template-columns: 1fr 2fr 1fr;
    grid-template-rows: 50px 50px;
    grid-gap: 3px;
}

fr - fraction unit, takes up a part of 100%

----------------------------------

.container {
    display: grid;
    grid-template: repeat(2, 50px) / repeat(3, 1fr);
    grid-gap: 3px;
}

compact way to write down grid params, L - down for rows, right for columns

------------------------------------
GRID COLUMN POSITIONS
------------------------------------

grid-column-start:
grid-column-end:
        gives a column directions how long should it span

grid-column: 1 / -1;
        compact version 'start / end'
        -1 means - last column


---------------------------
TEMPLATE AREAS
---------------------------

.container {
    height: 100%;
    display: grid;
    grid-gap: 3px;
    grid-template-columns: repeat(12, 1fr);
    grid-template-rows: 40px auto 40px;
    grid-template-areas:
        // strings represemt our layout
        ". h h h h h h h h h h ."
        "m c c c c c c c c c c c"
        ". f f f f f f f f f f .";
}

// we assign letters to blocks and they take that position. all areas must be rectangles or the whole layout breaks
.header {
    grid-area: h;
}

.menu {
    grid-area: m;
}

.content {
    grid-area: c;
}

.footer {
    grid-area: f;
}

---------------------------------------
Auto-fit and minmax
---------------------------------------

.container {
    display: grid;
    grid-gap: 5px;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    grid-template-rows: repeat(2, 100px);
}

minmax - gives minumum and maximum width params to the elements of the grid, so stretching is more smooth with no empty space
auto-fit - similar to flex wrap, moves elements to the next/previous line instead of stretching/squeezing them

---------------------------------------
Implicit rows
---------------------------------------

grid-auto-rows: 100px;

gives all the rows same size so that the rows that are created beyond set amount of 'grid-template-rows:'
will have proper height

---------------------------------------
AUTO FLOW
---------------------------------------

grid-auto-flow: dense < uses dense algorythm to fill in the empty spots if item grid sizing is uneven

this is an example of source order independence
